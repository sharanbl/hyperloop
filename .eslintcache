[{"/Users/sharanlokeshwar/Desktop/hyperloop/src/index.js":"1","/Users/sharanlokeshwar/Desktop/hyperloop/src/App.js":"2","/Users/sharanlokeshwar/Desktop/hyperloop/src/Components/HomePage/HomePage.js":"3","/Users/sharanlokeshwar/Desktop/hyperloop/src/Components/AWSConfig.js":"4"},{"size":501,"mtime":1612038358054,"results":"5","hashOfConfig":"6"},{"size":257,"mtime":1612044657323,"results":"7","hashOfConfig":"6"},{"size":5341,"mtime":1612823419559,"results":"8","hashOfConfig":"6"},{"size":1803,"mtime":1612823677309,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},"1nrzavn",{"filePath":"13","messages":"14","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},{"filePath":"15","messages":"16","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"17"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20","usedDeprecatedRules":"12"},"/Users/sharanlokeshwar/Desktop/hyperloop/src/index.js",[],["21","22"],"/Users/sharanlokeshwar/Desktop/hyperloop/src/App.js",[],"/Users/sharanlokeshwar/Desktop/hyperloop/src/Components/HomePage/HomePage.js",["23","24","25","26","27","28"],"import React, { Component } from 'react';\nimport { Row, Col, Container, Input, Button } from 'reactstrap';\nimport './HomePage.css';\nimport start from '../../Assets/start.svg';\nimport stop from '../../Assets/stop.svg';\nimport speedup from '../../Assets/speedup.svg';\nimport speeddown from '../../Assets/break.svg';\nimport ReactSpeedometer from \"react-d3-speedometer\";\n\nimport AWS from 'aws-sdk';\nimport awsIoT from 'aws-iot-device-sdk';\n\n\n// let awsConfig = {\n//     identityPoolId: 'us-east-2:dc49bbd2-6a53-4243-827d-9cad0e5444f7',\n//     mqttEndpoint: `a1xzn1z3u9o660-ats.iot.us-east-2.amazonaws.com`,\n//     region: 'us-east-2',\n//     clientId: 'mqtt-client-' + (Math.floor((Math.random() * 100000 + 1))),\n//     //userPoolId: process.env.REACT_APP_USER_POOL_ID\n//   };\n  \n//   const mqttClient = awsIoT.device({\n//     region: awsConfig.region,\n//     host: awsConfig.mqttEndpoint,\n//     clientId: awsConfig.clientId,\n//     protocol: 'wss',\n//     maximumReconnectTimeMs: 8000,\n//     debug: false,\n//     accessKeyId: '',\n//     secretKey: '',\n//     sessionToken: ''\n//   });\n  \n//   AWS.config.region = awsConfig.region;\n  \n//   AWS.config.credentials = new AWS.CognitoIdentityCredentials({\n//       IdentityPoolId: awsConfig.identityPoolId\n//   });\n  \n//   AWS.config.credentials.get((err) => {\n//       if (err) {\n//           console.log(AWS.config.credentials);\n//           throw err;\n//       } else {\n//           mqttClient.updateWebSocketCredentials(\n//               AWS.config.credentials.accessKeyId,\n//               AWS.config.credentials.secretAccessKey,\n//               AWS.config.credentials.sessionToken\n//           );\n//       }\n//   });\n  \n\n\nclass HomePage extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            speed: 100,\n            input: '',\n        };\n\n        this.speedometer = this.speedometer.bind(this);\n     //  this.handlePWM = this.handlePWM.bind(this);\n     //   this.handleChange = this.handleChange.bind(this);\n    }\n\n   speedometer = () => {\n\n        this.setState({speed: Math.floor(Math.random() * 200)});\n   }\n\n//    handlePWM = () => {\n//         console.log(this.state.input);\n//         // mqttClient.on('connect', () => {\n//         //     console.log('mqttClient connected')\n//         //     mqttClient.publish('hello/pwm')\n//         //   });\n          \n//         //   mqttClient.on('error', (err) => {\n//         //     console.log('mqttClient error:', err)\n//         //     //login()\n//         //   });\n          \n//         //   mqttClient.on('message', (topic, payload) => {\n//         //     const msg = JSON.parse(payload.toString());\n//         //     console.log('mqttClient message: ', this.state.input);\n//         //   });\n//         mqttClient.publish('hellp/pwm', JSON.stringify(this.state.input))\n\n//    }\n\n//    handleChange = (e) => {\n//         this.setState({input: e.target.value})\n//    }\n\n   componentDidMount() {\n    setInterval(this.speedometer, 1000);\n  }\n\n\n    render() {\n        return(\n            <div className=\"HomePage\">\n                <h1 id=\"IITH\">ILLINOIS TECH HYPERLOOP</h1>\n                <br />\n                <br />\n                <Row>\n                    <Col md={8}>\n                        <Container>\n                        <Row>\n                            <Col>\n                                <a href=\"#\"><img src={start} id=\"startbtn\" alt=\"start button\" /></a>\n                            </Col>\n                            <Col>\n                                 <a href=\"#\"><img src={stop} id=\"stopbtn\" alt=\"stop button\" /></a>\n                            </Col>\n                        </Row>\n                        </Container>\n\n                        <Container id=\"rpmcontainer\">\n                            <br /><br />\n                            <div id=\"rpm\">\n                            <ReactSpeedometer height={200}/>\n                            <h3 id=\"rpmtext\">RPM</h3>\n                            </div>\n                        </Container>\n\n                        <Container>\n                            <Input placeholder=\"PWM from min value: 700 to max value: 2000\" type=\"number\" min={700} max={2000} onChange={this.handleChange }/><Button onClick={this.handlePWM}>Submit</Button>\n                        </Container>\n\n                        {/* <Container id=\"speedicon\">\n                            <Row>\n                            <a href=\"#\"><img src={speedup} id=\"speedup\" alt=\"speed up\" /></a>\n                            </Row>\n                            <br />\n                            <Row>\n                            <a href=\"#\"><img src={speeddown} id=\"speeddown\" alt=\"speed down\" /></a>\n                            </Row>\n                        </Container> */}\n                    </Col>\n\n                    <Col md={4} id=\"meters\">\n                    <ReactSpeedometer height={150} width={250} value={this.state.speed}/>\n                    <h6>Speedometer</h6>\n                    <br />\n                    <ReactSpeedometer height={150} width={250}/>\n                    <h6>Gyrometer</h6>\n                    <br />\n                    <ReactSpeedometer height={150} width={250}/>\n                    <h6>Speed</h6>\n                    </Col>\n                </Row>\n\n            </div>\n        )\n    }\n}\n\nexport default HomePage;","/Users/sharanlokeshwar/Desktop/hyperloop/src/Components/AWSConfig.js",["29"],"import React, { Component } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nconst AWS = require('aws-sdk');\nconst AWSIoTData = require('aws-iot-device-sdk');\n\nlet awsConfig = {\n  identityPoolId: 'us-east-2:dc49bbd2-6a53-4243-827d-9cad0e5444f7',\n  mqttEndpoint: `a1xzn1z3u9o660-ats.iot.us-east-2.amazonaws.com`,\n  region: 'us-east-2',\n  clientId: 'mqtt-client-' + (Math.floor((Math.random() * 100000 + 1))),\n  //userPoolId: process.env.REACT_APP_USER_POOL_ID\n};\n\nconst mqttClient = AWSIoTData.device({\n  region: awsConfig.region,\n  host: awsConfig.mqttEndpoint,\n  clientId: awsConfig.clientId,\n  protocol: 'wss',\n  maximumReconnectTimeMs: 8000,\n  debug: false,\n  accessKeyId: '',\n  secretKey: '',\n  sessionToken: ''\n});\n\nAWS.config.region = awsConfig.region;\n\nAWS.config.credentials = new AWS.CognitoIdentityCredentials({\n    IdentityPoolId: awsConfig.identityPoolId\n});\n\nAWS.config.credentials.get((err) => {\n    if (err) {\n        console.log(AWS.config.credentials);\n        throw err;\n    } else {\n        mqttClient.updateWebSocketCredentials(\n            AWS.config.credentials.accessKeyId,\n            AWS.config.credentials.secretAccessKey,\n            AWS.config.credentials.sessionToken\n        );\n    }\n});\n\nmqttClient.on('connect', () => {\n  console.log('mqttClient connected')\n  mqttClient.subscribe('helloworld')\n});\n\nmqttClient.on('error', (err) => {\n  console.log('mqttClient error:', err)\n  //login()\n});\n\nmqttClient.on('message', (topic, payload) => {\n  const msg = JSON.parse(payload.toString());\n  console.log('mqttClient message: ', msg);\n});\n\nclass AWSConfig extends Component {\n    render() {\n        return (\n            <div>\n                <h1>Realtime Weather</h1>\n                <p>Check the console..</p>\n            </div>\n        );\n    }\n}\n\nexport default AWSConfig;\n",{"ruleId":"30","replacedBy":"31"},{"ruleId":"32","replacedBy":"33"},{"ruleId":"34","severity":1,"message":"35","line":6,"column":8,"nodeType":"36","messageId":"37","endLine":6,"endColumn":15},{"ruleId":"34","severity":1,"message":"38","line":7,"column":8,"nodeType":"36","messageId":"37","endLine":7,"endColumn":17},{"ruleId":"34","severity":1,"message":"39","line":10,"column":8,"nodeType":"36","messageId":"37","endLine":10,"endColumn":11},{"ruleId":"34","severity":1,"message":"40","line":11,"column":8,"nodeType":"36","messageId":"37","endLine":11,"endColumn":14},{"ruleId":"41","severity":1,"message":"42","line":115,"column":33,"nodeType":"43","endLine":115,"endColumn":45},{"ruleId":"41","severity":1,"message":"42","line":118,"column":34,"nodeType":"43","endLine":118,"endColumn":46},{"ruleId":"34","severity":1,"message":"44","line":2,"column":16,"nodeType":"36","messageId":"37","endLine":2,"endColumn":22},"no-native-reassign",["45"],"no-negated-in-lhs",["46"],"no-unused-vars","'speedup' is defined but never used.","Identifier","unusedVar","'speeddown' is defined but never used.","'AWS' is defined but never used.","'awsIoT' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'uuidv4' is defined but never used.","no-global-assign","no-unsafe-negation"]